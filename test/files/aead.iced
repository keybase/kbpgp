{make_esc} = require 'iced-error'
{KeyManager} = require '../../lib/main'
{do_message} = require '../../lib/openpgp/processor'


pubkey0 = """-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEaLhtnhYJKwYBBAHaRw8BAQdAJSwYTaSJXjk3TxGPEWGfsWZqFhdWXV/rlfJX
DeAvfke0Kk1pY2hhxYIgVGVzdCAoVGVzdGluZyBrZXkhISEhISkgPG1AaXJjLnBs
PoiTBBMWCgA7FiEE1t8rUo/pfSFEVCL6IJl+/QCCPu4FAmi4bZ4CGwMFCwkIBwIC
IgIGFQoJCAsCBBYCAwECHgcCF4AACgkQIJl+/QCCPu4CCAEA6eES5eav4IMD8ytV
SZhWHmrECWXZrq2trBPedFnmKJQA/3tQmFYrzOEQQEXtI/Jr+bYu5tyh0qBzNLqw
JCdXP6gPuDgEaLhtnhIKKwYBBAGXVQEFAQEHQNA5qkppCjZSmGeicFF6p5KpT+Y0
ilGX//S48vVS7OFIAwEIB4h4BBgWCgAgFiEE1t8rUo/pfSFEVCL6IJl+/QCCPu4F
Ami4bZ4CGwwACgkQIJl+/QCCPu74aAD/QIU4cyBtvXW4p7ZSo5gEJ/BEHBX5w/ks
0liDtMYgxrIA/3aSN2bshHdh8VBzmB2c/8bgCXusjGSh8xsDXKlap88B
=1O1s
-----END PGP PUBLIC KEY BLOCK-----
"""

privkey0 = """-----BEGIN PGP PRIVATE KEY BLOCK-----

lFgEaLhtnhYJKwYBBAHaRw8BAQdAJSwYTaSJXjk3TxGPEWGfsWZqFhdWXV/rlfJX
DeAvfkcAAQCxE82PtB2Mn37QLZf4rqLf3VXq/3XsmFo1gNmXnMm7TBNVtCpNaWNo
YcWCIFRlc3QgKFRlc3Rpbmcga2V5ISEhISEpIDxtQGlyYy5wbD6IkwQTFgoAOxYh
BNbfK1KP6X0hRFQi+iCZfv0Agj7uBQJouG2eAhsDBQsJCAcCAiICBhUKCQgLAgQW
AgMBAh4HAheAAAoJECCZfv0Agj7uAggBAOnhEuXmr+CDA/MrVUmYVh5qxAll2a6t
rawT3nRZ5iiUAP97UJhWK8zhEEBF7SPya/m2LubcodKgczS6sCQnVz+oD5xdBGi4
bZ4SCisGAQQBl1UBBQEBB0DQOapKaQo2UphnonBReqeSqU/mNIpRl//0uPL1Uuzh
SAMBCAcAAP9MyGIVmnGMVsmKJkVSD+nbOojpnTtwYXY8X0BFD4/u8A/AiHgEGBYK
ACAWIQTW3ytSj+l9IURUIvogmX79AII+7gUCaLhtngIbDAAKCRAgmX79AII+7vho
AP9AhThzIG29dbintlKjmAQn8EQcFfnD+SzSWIO0xiDGsgD/dpI3ZuyEd2HxUHOY
HZz/xuAJe6yMZKHzGwNcqVqnzwE=
=u3oQ
-----END PGP PRIVATE KEY BLOCK-----
"""

exports.test_aead_subpacket = (T, cb) ->
  esc = make_esc cb

  # Test "pref-aead-algos" algos in an existing key generated by GnuPG 2.4.8.
  await KeyManager.import_from_armored_pgp { armored : pubkey0 }, esc defer pub_km, warnings
  T.waypoint "loaded public key"
  T.assert (warnings.warnings().length is 0), "didn't get any warnings"

  # Load private key.
  await KeyManager.import_from_armored_pgp { armored : privkey0 }, esc defer priv_km, warnings
  T.waypoint "loaded private key"
  T.assert (warnings.warnings().length is 0), "didn't get any warnings"

  cb()

exports.decrypt_aead_encrypted_msg_from_gpg = (T, cb) ->
  msg = """-----BEGIN PGP MESSAGE-----

hF4DdPTOZk0oQCoSAQdAXZ78pjWxo2+56WNd4lqEdi8eMLhRqrnzUUCnLtTUaFQw
FYtvT20feVpvyseCjCfOAUqXEufp2viwReswUkFx1fVFlKU6aUIPqhmWDeKX+CHq
1FEBCQIQ6SBr7jlaTveOvSOhU35DHtMDkR2Vs/NRdPixDeWINjR6/Ui6Z5CBDgrV
R1LD+dpMovtwsAYYJWpKMB/9ilo+e9cf7p+855MM6Dayu0U=
=d1FF
-----END PGP MESSAGE-----
"""
  esc = make_esc cb

  await KeyManager.import_from_armored_pgp { armored : privkey0 }, esc defer km
  await do_message { armored: msg, keyfetch: km }, defer err, msg
  T.assert err?
  T.assert err.message.includes("Could not find encrypted data packet"), "got the right error"
  # T.no_error err
  # T.equal msg[0].toString(), "hello world\n", "got the right plaintext"

  cb()
